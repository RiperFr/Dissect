<?php
namespace Riper\Dissect\Services;

use Riper\Dissect\Factories\CodeCoverageFactory;
use Riper\Dissect\Factories\WriterFactory;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;

class CoverageMergeService
{

    /**
     * @var array List of absolute path to .cov report generated by phpunit >4
     */
    protected $coverageReports = array();

    /**
     * @var null The absolute path to the folder where HTML reports will be generated
     */
    protected $outputHTMLReportFolder = null;

    protected $outputXMLReportFile = 'coverage.xml';

    protected $OutputPhpUnitCoverageXmlDirectory = null;

    protected $outputPHPReportFile = null;

    /**
     *
     * @var WriterFactory
     */
    protected $writerFactory;

    /**
     * @var CodeCoverageFactory
     */
    protected $codeCoverageFactory;


    protected $lowUpperBound = 50;

    protected $highLowerBound = 70;

    protected $generator = 'CoverageReportMerge';


    public function __construct(WriterFactory $writerFactory, CodeCoverageFactory $CodeCoverageFactory)
    {
        $this->writerFactory       = $writerFactory;
        $this->codeCoverageFactory = $CodeCoverageFactory;
    }


    /**
     * @param string $directory The directory where all HTML files will be generated
     */
    public function setOutputHTMLReportFolder($directory)
    {
        $this->outputHTMLReportFolder = realpath($directory);
    }

    public function setOutputXMLReportFile($file){
        $this->outputXMLReportFile = $file ;
    }

    public function setOutputPhpUnitCoverageXmlDirectory($dir)
    {
        $this->OutputPhpUnitCoverageXmlDirectory = $dir;
    }

    public function setOutputPHPReportFile($file)
    {
        $this->outputPHPReportFile = $file;
    }

    /**
     * Add a coverage file to the list of report to include in the final HTML report
     *
     * @param $coverageReport
     */
    public function addCoverageReport($coverageReport)
    {
        $this->coverageReports[] = realpath($coverageReport);
    }

    public function getCoverageReports()
    {
        return $this->coverageReports;
    }

    public function setLowUpperBound($lowUpperBound)
    {
        $this->lowUpperBound = $lowUpperBound;
    }

    public function setHighLowerBound($highLowerBound)
    {
        $this->highLowerBound = $highLowerBound;
    }

    public function setGeneratorName($generator)
    {
        $this->generator = $generator;
    }

    /**
     * Find all file located in a directory. The pattern is *.cov
     *
     * @param string $directory The path to the directory to scan
     */
    public function findCoverageReport($directory)
    {
        $finder = new Finder();
        $finder->name('*.cov');
        foreach ($finder->in($directory) as $file) {
            $this->addCoverageReport($file->getRealpath());
        }
    }


    /**
     * @return \PHP_CodeCoverage
     */
    protected function mergeReports()
    {
        $mergedCoverage = $this->codeCoverageFactory->getCodeCoverage();
        $mergedCoverage->setProcessUncoveredFilesFromWhitelist(true);
        foreach ($this->coverageReports as $coverageReportFile) {
            $_coverage = include($coverageReportFile);
            //Be careful, the $coverage variable is override in the included file !
            $mergedCoverage->merge($_coverage);
            unset($_coverage);
        }
        return $mergedCoverage;

    }

    /**
     * Generate the final report in HTML into the directory set in parameter
     */
    public function generate()
    {
        $coverage = $this->mergeReports();
        echo " ";
        $htmlWriter   = $this->writerFactory->getHTMLWriter($this->lowUpperBound, $this->highLowerBound, $this->generator);

        $XMLWriter = $this->writerFactory->getCloverXMLWriter();
        $htmlWriter->process($coverage, $this->outputHTMLReportFolder);
        $XMLWriter->process($coverage,$this->outputXMLReportFile,'yellowSubMarine');

        if ($this->OutputPhpUnitCoverageXmlDirectory) {
            $phpUnitCoverageWriter = $this->writerFactory->getXMLWriter();
            //echo " - phpunitXMLWriter got ";
            $phpUnitCoverageWriter->process($coverage, $this->OutputPhpUnitCoverageXmlDirectory);
            //echo " - phpunitXml done ";
        }

        if ($this->outputPHPReportFile) {
            $phpUnitCoverageWriter = $this->writerFactory->getPhpWriter();
            //echo " - phpunitWriter got ";
            $phpUnitCoverageWriter->process($coverage, $this->outputPHPReportFile);
           // echo " - phpunit done ";
        }
    }
}
